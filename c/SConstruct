# This SConstruct launches all Sconscript files inside the library directories 
# The Environment() is created in the SConstruct script
# This dir can be built standalone by executing scons here, or together
# by executing scons in the parent directory
import sys
import os

#Compiler configure
debug = int(ARGUMENTS.get('debug', '0'))
compiler = ARGUMENTS.get('compiler', 'gcc')

#Paths
system_include = '/usr/include'
system_libpath = '/usr/lib'

#commons_path =     '#/common-libs'
#bioinfo_path =     '#/bioinfo-libs'
c_src_path =        '#/src'
aligners_path =     '#/src/aligners'
bioformats_path =   '#/src/bioformats'
commons_path =      '#/src/commons'
containers_path =   '#/src/containers'
math_path =         '#/src/math'

VariantDir('build', 'src', duplicate=0)

build_tools = ['default']


#Build environment
env = Environment(tools = build_tools,
		  CFLAGS = ' -Wall -std=c99 -D_XOPEN_SOURCE=700 -D_BSD_SOURCE -D_GNU_SOURCE -D_REENTRANT ',
		  CPPPATH = ['.', '#', system_include, '%s/libxml2' % system_include, '%s' % c_src_path, '%s' % aligners_path
		  , '%s' % bioformats_path, '%s' % commons_path, '%s' % containers_path, '%s' % math_path], 
		  LIBPATH = [system_libpath],
		  LINKFLAGS = [],
		  LIBS = ['xml2', 'm', 'z', 'curl'])

if os.environ.has_key('CPATH'):
    for dir in os.getenv('CPATH').split(':'):
        env.Append(CPPPATH=[dir])

if os.environ.has_key('LIBRARY_PATH'):
    for dir in os.getenv('LIBRARY_PATH').split(':'):
        env.Append(LIBPATH=[dir])

if compiler == 'icc':
	env['tools'] += ['intelc']
	env['CFLAGS'] += ' -msse4.2 -openmp '
	env['LIBS'] += ['irc']
	env['LINKFLAGS'] += ['-openmp']
else:
	env['CFLAGS'] += ' -fopenmp '
	env['LINKFLAGS'] += ['-fopenmp']

env['objects'] = []
env.Decider('MD5-timestamp')


# Third party
third_party_libs = []
env['CPPPATH'].append('#/../third_party/')

print "aaaaaaaaaaaaaaaaantes c/"
print env['objects']

# Compile argtable/ objects
argtableenv = env.Clone()
argtableenv['CFLAGS'] += ' -DHAVE_CONFIG_H -fPIC -DPIC'
argtableenv.Decider('MD5-timestamp')

if debug == 1:
    argtableenv['CFLAGS'] += ' -O0 -g'
else:
    argtableenv['CFLAGS'] += ' -O2 '

third_party_libs += argtableenv.Object(Glob('#/../third_party/argtable/*.c'))

# Compile config/ objects
configenv = env.Clone()
configenv['CFLAGS'] += ' -DHAVE_CONFIG_H -D_REENTRANT -Wall -Wshadow -Wextra -Wdeclaration-after-statement -Wno-unused-parameter'
configenv.Decider('MD5-timestamp')

if debug == 1:
    configenv['CFLAGS'] += ' -O0 -g'
else:
    configenv['CFLAGS'] += ' -O2 '


third_party_libs += configenv.Object(Glob('#/../third_party/config/*.c'))


# our src

print "aaaaaaaaaaaaaaaaantes  aligners c/"
print env['objects']
SConscript('src/aligners/SConscript', exports = ['env', 'debug', 'compiler'])

print "aaaaaaaaaaaaaaaaantes  bioformats c/"
print env['objects']
SConscript('src/bioformats/SConscript', exports = ['env', 'debug', 'compiler'])
print "aaaaaaaaaaaaaaaaantes  commons c/"
print env['objects']
SConscript('src/commons/SConscript', exports = ['env', 'debug', 'compiler'])
print "aaaaaaaaaaaaaaaaantes  containers c/"
print env['objects']
SConscript('src/containers/SConscript', exports = ['env', 'debug', 'compiler'])
print "aaaaaaaaaaaaaaaaantes math c/"
print env['objects']
SConscript('src/math/SConscript', exports = ['env', 'debug', 'compiler'])


print "deeeeeeeeeeeeeeeespues c/"
print env['objects']
env.Library('build/hpg', env['objects'] + third_party_libs)
